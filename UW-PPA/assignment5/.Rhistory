}
dotchart(meddiff)
hist(meddiff)
dots(meddiff)
stripchart(meddiff,method="stack",at=0)
?stripchart
stripchart(meddiff,method="stack",at=0,pch=1)
stripchart(meddiff,method="stack",at=0,pch=1,col="blue")
stripchart(meddiff,method="stack",at=0,pch=1,col="blue",fill="blue")
stripchart(meddiff,method="stack",at=0,pch=16,col="blue")
stripchart(meddiff,method="stack",at=0,pch=16,col="blue")
ntrial<-1000
pnorm(0.8)
qnorm(0.8)
qnorm(.975)
qnorm(.9)
qnorm(.9985)
qnorm(.995)
nc<-load(url("http://bit.ly/dasi_nc"))
str(nc)
nc<-load(url("http://d396qusza40orc.cloudfront.net/statistics/lab_resources/nc.RData."))
library(OpenIntro)
library(Openintro)
library(openintro)
data("ncbirths")
str(ncbirths)
open.packages("openintro")
install.packages("openintro")
library(openintro)
nc<-data("ncbirths")
str(nc)
ncbirths
data("ncbirths")
str(ncbirths)
str(ncbirths)
summary(ncbirths)
summary(ncbirths$gained)
boxplot(ncbirths$gained)
hist(ncbirths$gained)
nc<-ncbirths
nc<-data("ncbirths")
data("ncbirths")
nc<-ncbirths
gained_clean = na.omit(nc$gained)
n = length(gained_clean)
?rep
hist(boot_means)
boot_means = rep(NA, 100)
for(i in 1:100){
boot_sample = sample(gained_clean, n, replace = TRUE)
boot_means[i] = mean(boot_sample)
}
hist(boot_means)
load(url("http://bit.ly/dasi_nc"))
qnorm(0.8)
pt(1.91,10,lower.tail=FALSE)
pt(3.45,16,lower.tail=TRUE)
pt(-3.45,16,lower.tail=TRUE)
pt(.83,6,lower.tail=FALSE)*2
pt(-.83, df = 6, lower.tail = TRUE) *2
pnorm(-1.657,lower.tail=TRUE)
pnorm(-1.657,lower.tail=TRUE)*2
2.7e7
2.7e7/(400^3)
library("ggplot2", lib.loc="~/R/win-library/3.2")
library("ggplot2", lib.loc="~/R/win-library/3.2")
remove.packages("ggplot2")
install.packages("ggplot2")
library(ggplot2)
library(ggplot2)
remove.packages("ggplot2)")
install.packages("ggplot2")
library(ggplot2)
install.packages("dplyr")
library(dplyr)
install.packages("lubridate")
library(lubridate)
install.packages("caret")
library(caret)
names(cars)
str(cars)
mean(cars[,2])
summary(cars)
?which
which(cars$dist==85)
cars
library(downloader)
url <- "https://raw.githubusercontent.com/genomicsclass/dagdata/master/inst/extdata/mice_pheno.csv"
filename <- basename(url)
download(url, destfile=filename)
dat <- na.omit( read.csv(filename) )
str(dat)
str(dat)
pnorm(1)-pnorm(-1)
pnorm(2)-pnorm(-2)
pnorm(3)-pnorm(-3)
y<-dat %>% filter(Diet=="chow" & Sex=="M") %>% select(Bodyweight) %>% unlist()
m<=(mean(y)+popsd(y))
y<-dat %>% filter(Diet=="chow" & Sex=="M") %>% select(Bodyweight) %>% unlist()
mean(y<=(mean(y)+popsd(y)))
y<-dat %>% filter(Diet=="chow" & Sex=="M") %>% select(Bodyweight) %>% unlist()
library(dplyr)
y<-dat %>% filter(Diet=="chow" & Sex=="M") %>% select(Bodyweight) %>% unlist()
mean(y<=(mean(y)+popsd(y)))
library(rafa)
library(rafalib)
install.packages("rafalib")
library(dplyr)
library(rafalib)
y<-dat %>% filter(Diet=="chow" & Sex=="M") %>% select(Bodyweight) %>% unlist()
mean(y<=(mean(y)+popsd(y)))
mean(y<=(mean(y)+popsd(y)))-mean(y<=(mean(y)-popsd(y)))
z <- ( y - mean(y) ) / popsd(y)
mean( abs(z) <=1 )
mean( abs(z) <=1 )
mean( abs(z) <=2 )
mean( abs(z) <=3 )
qqnorm(z)
abline(0,1)
mypar(2,2)
y <- filter(dat, Sex=="M" & Diet=="chow") %>% select(Bodyweight) %>% unlist
z <- ( y - mean(y) ) / popsd(y)
qqnorm(z);abline(0,1)
y <- filter(dat, Sex=="F" & Diet=="chow") %>% select(Bodyweight) %>% unlist
z <- ( y - mean(y) ) / popsd(y)
qqnorm(z);abline(0,1)
y <- filter(dat, Sex=="M" & Diet=="hf") %>% select(Bodyweight) %>% unlist
z <- ( y - mean(y) ) / popsd(y)
qqnorm(z);abline(0,1)
y <- filter(dat, Sex=="F" & Diet=="hf") %>% select(Bodyweight) %>% unlist
z <- ( y - mean(y) ) / popsd(y)
qqnorm(z);abline(0,1)
str(y)
?replicate
replicate(10000,sample(y,25))
a<-replicate(10000,sample(y,25))
str(a)
a[,1]
a<-replicate(10000,mean(sample(y,25))
set.seed(1)
a<-replicate(10000,mean(sample(y,25)))
str(a)
set.seed(1)
y<-replicate(10000,mean(sample(y,25)))
hist(y)
mpar(1,1)
z<-( y - mean(y) ) / popsd(y)
qqnorm(z);abline(0,1)
set.seed(1)
y<-replicate(10000,mean(sample(y,25)))
hist(y)
mypar(1,1)
z<-( y - mean(y) ) / popsd(y)
qqnorm(z);abline(0,1)
set.seed(1)
y<-replicate(10000,mean(sample(y,25)))
hist(y)
mypar(1,2)
z<-( y - mean(y) ) / popsd(y)
qqnorm(z);abline(0,1)
set.seed(1)
y<-replicate(10000,mean(sample(y,25)))
mypar(1,2)
hist(y)
z<-( y - mean(y) ) / popsd(y)
qqnorm(z);abline(0,1)
set.seed(1)
y<-replicate(10000,mean(sample(y,25)))
mypar(2,2)
hist(y)
z<-( y - mean(y) ) / popsd(y)
qqnorm(z);abline(0,1)
set.seed(1)
avgs <- replicate(10000, mean( sample(y, 25)))
mypar(1,2)
hist(avgs)
qqnorm(avgs)
qqline(avgs)
y <- filter(dat, Sex=="M" & Diet=="chow") %>% select(Bodyweight) %>% unlist
set.seed(1)
z<-replicate(10000,mean(sample(y,25)))
mypar(2,2)
hist(z)
z<-( y - mean(y) ) / popsd(y)
qqnorm(z);abline(0,1)
#..or
set.seed(1)
avgs <- replicate(10000, mean( sample(y, 25)))
mypar(2,2)
hist(avgs)
qqnorm(avgs)
qqline(avgs)
y <- filter(dat, Sex=="M" & Diet=="chow") %>% select(Bodyweight) %>% unlist
set.seed(1)
z<-replicate(10000,mean(sample(y,25)))
mypar(2,2)
hist(z)
z<-( y - mean(y) ) / popsd(y)
qqnorm(z);abline(0,1)
#..or
set.seed(1)
avgs <- replicate(10000, mean( sample(y, 25)))
#mypar(2,2)
hist(avgs)
qqnorm(avgs)
qqline(avgs)
url <- "https://raw.githubusercontent.com/genomicsclass/dagdata/master/inst/extdata/babies.txt"
filename <- basename(url)
download(url, destfile=filename)
babies <- read.table("babies.txt", header=TRUE)
bwt.nonsmoke <- filter(babies, smoke==0) %>% select(bwt) %>% unlist
bwt.smoke <- filter(babies, smoke==1) %>% select(bwt) %>% unlist
library(downloader)
library(dplyr)
url <- "https://raw.githubusercontent.com/genomicsclass/dagdata/master/inst/extdata/babies.txt"
filename <- basename(url)
download(url, destfile=filename)
babies <- read.table("babies.txt", header=TRUE)
bwt.nonsmoke <- filter(babies, smoke==0) %>% select(bwt) %>% unlist
bwt.smoke <- filter(babies, smoke==1) %>% select(bwt) %>% unlist
?shuffle
library(raflab)
library(rafalab)
install.packages("rafalib")
library(rafalab)
library(rafalib)
?shuffle
?shuffle()
(.95)^20
.95*.02
.02*.05
.98*.03
.97*.98
.9506+.0294+.001+.019
.0294/(.0294+.019)
pnorm(.975)
pnorm(1.96)
pnorm(1,sd=2)
qnorm(.8)
pnorm(.84)
19.6/4.16
4.711^2
10/sqrt(23)
2.085144*1.96
5-4.086882
pnorm(.913118,sd=2.085144)
pnorm(.913118)
qnorm(.8)
(19.6/2.16)^2
10/sqrt(83)
1.0976*1.96
pnorm(.85)
library(UsingR)
data("father.son",package="UsingR")
mean(father.son$sheight)
str(father.son)
library(dplyr)
father.son %>%
filter(round(fheight,0)==71) %>%
mean(sheight)
summary(father.son)
father.son %>%
filter(round(fheight,0)==71) %>%
mean(sheight,na.rm=TRUE)
library(dplyr)
father.son %>%
filter(round(fheight,0)==71)
father.son %>%
filter(round(fheight,0)==71) %>%
mean(sheight)
library(dplyr)
father.son %>%
filter(round(fheight,0)==71) %>%
mean(father.son$sheight)
?mean
library(dplyr)
father.son %>%
filter(round(fheight,0)==71) %>%
max(sheight)
ibrary(dplyr)
fH71<-father.son %>%
filter(round(fheight,0)==71) %>%
mean(fH71$sheight)
summary(fH71)
library(dplyr)
fH71<-father.son %>%
filter(fheight>71)
mean(fH71$sheight)
library(dplyr)
fH71<-father.son %>%
filter(round(fheight,0)==71)
mean(fH71$sheight)
library(dplyr)
fH71<-father.son %>%
filter(round(fheight,0)==71) %>%
mean(sheight)
library(dplyr)
fH71<-father.son %>%
filter(round(fheight,0)==71) %>%
mean(fH71$sheight)
fH71<-father.son %>%
filter(round(fheight,0)==71) %>%
mean(fH71$sheight)
fH71<-father.son %>%
filter(round(fheight,0)==71)
mean(fH71$sheight)
library(dplyr)
fH71<-father.son %>%
filter(round(fheight,0)==71) %>%
summarize(mean(sheight))
father.son %>%
filter(round(fheight,0)==71) %>%
summarize(mean(sheight))
x1=seq(1,10,1)
X=cbind(x1,2*x1,3*x1,4*x1,5*x1)
sum(X[7,])
x1=1:10
X=cbind(x1,2*x1,3*x1,4*x1,5*x1)
sum(X[7,])
matrix(1:60,20,3)
matrix(1:60,20,3,byrow=TRUE)
?%8%
?%*%
X=matrix(100,20,5)
X
X=matrix(seq(1,100),20,5)
X=matrix(seq(1,100),20,5)
X
X %*% matrix(1,ncol(X) )
X%*%diag(ncol(X))
diag(ncol(X))
diag(X)
?diag
X
diag(X)
diag(ncol(X))
diag(5)
X = cbind(rep(1,nx + ny),rep(c(0,1),c(nx, ny)))
nx<-5
ny<-7
X = cbind(rep(1,nx + ny),rep(c(0,1),c(nx, ny)))
X
crossprod(X)
XtX = t(X) %*% X
XtX[ 1,1 ]
XtX
library(devtools)
install_github("genomicsclass/GSE5859Subset")
library(GSE5859Subset)
data(GSE5859Subset) ##this loads the three tables
head(sampleInfo)
theDate="2005-06-27"
thisDate<-sampleInfo[sampleInfo[,2]==theDate,]
nrow(thisDate)
thisDate
theDate="2005-06-27"
thisDate<-sampleInfo[sampleInfo$date==theDate,]
nrow(thisDate)
sum(sampleInfo$date=="2005-06-27")
install.packages("caret")
install.packages("rpart")
install.packages("tree")
install.packages("randomForest")
install.packages("e1071")
install.packages("ggplot2")
setwd("C:/Users/Mike/Rspace/UW-Data-Science/UW-PPA/assignment 5")
sf<-read.csv("seaflow_21min.csv",stringsAsFactors="FALSE")
sf<-read.csv("seaflow_21min.csv",stringsAsFactors=FALSE)
str(sf)
summary(sf)
nrow(sf[ sf$pop=="synecho", ])
table(sf$pop)
summary(sf)
?createDataPartition
library(caret)
library(rpart)
library(tree)
library(randomForest)
library(e1071)
library(ggplot2)
?createDataPartition
?sample.split
?sample.split()
library(caTools)
?sample.split()
library(rpart)
library(caTools)
set.seed(1000)
spl = sample.split(sf$time, SplitRatio = 0.5)
train = subset(sf, spl==TRUE)
test = subset(sf, spl==FALSE)
mean(train$time)
plot1<-ggplot(data=sf,aes(x=chl_small,y=pe,col=pop))+geom_point()
plot1<-ggplot(data=sf,aes(x=chl_small,y=pe,col=pop))+geom_point()
plot1
library(rpart)
library(rpart)
library(rpart.plot)
# construct formula object
fol<-formula(response ~ fsc_small + fsc_perp + fsc_big + pe + chl_big + chl_small)
model <- rpart(fol, method="class", data=train)
fol<-formula(pop ~ fsc_small + fsc_perp + fsc_big + pe + chl_big + chl_small)
model <- rpart(fol, method="class", data=train)
CARTb = rpart(pop ~ fsc_small + fsc_perp + fsc_big + pe + chl_big + chl_small, data=train, method="class")
prp(CARTb)
PredictCARTb = predict(CARTb, newdata = test, type = "class")
ct<-table(test$isB, PredictCARTb)
ct
(ct[1,1]+ct[2,2])/sum(ct)
PredictCARTb = predict(CARTb, newdata = test, type = "class")
ct<-table(test$pop, PredictCARTb)
ct
(ct[1,1]+ct[2,2])/sum(ct)
diagonal(ct)
diag(ct)
sum(diag(ct))
PredictCARTb = predict(CARTb, newdata = test, type = "class")
ct<-table(test$pop, PredictCARTb)
ct
sum(diag(ct))/sum(ct)
print(model)
?prp()
table(sf$pop
)
?predict
str(PredictCARTb)
sum(PredictCARTb==test$pop)/nrow(test)
library(randomForest)
library(randomForest)
fol<-formula(pop ~ fsc_small + fsc_perp + fsc_big + pe + chl_big + chl_small)
Forestmodel<-randomForest(fol, data=train)
PredictForest = predict(forestmodel, newdata = test)
forestmodel<-randomForest(fol, data=train)
forestmodel<-randomForest(pop ~ fsc_small + fsc_perp + fsc_big + pe + chl_big + chl_small, data=train)
forestmodel<-randomForest(pop ~ pe +chl_small, data=train)
forestmodel<-randomForest(pop ~ pe, data=train)
domFo
library(randomForest)
fol<-formula(pop ~ fsc_small + fsc_perp + fsc_big + pe + chl_big + chl_small)
forestmodel<-randomForest(fol, data=train)
?randomForest
str(train)
library(caret)
library(rpart)
library(tree)
library(randomForest)
library(e1071)
library(ggplot2)
## Step 1: Read and summarize the data
sf<-read.csv("seaflow_21min.csv")
str(sf)
summary(sf)
# Q2 How many particles labeled "synecho" are in the file provided?
nrow(sf[ sf$pop=="synecho", ])
table(sf$pop)
# Q3 What is the 3rd Quantile of the field fsc_small?
summary(sf)
## Step 2: Split the data into test and training sets
# Divide the data into two equal subsets, one for training and one for
# testing. Make sure to divide the data in an unbiased manner.
# You might consider using either the createDataPartition function or
# the sample function, although there are many ways to achieve the goal.
library(caTools)
set.seed(1000)
spl = sample.split(sf$time, SplitRatio = 0.5)
train = subset(sf, spl==TRUE)
test = subset(sf, spl==FALSE)
#Q4 What is the mean of the variable "time" for your training set?
mean(train$time)
## Step 3: Plot the data
# Plot pe against chl_small and color by pop
plot1<-ggplot(data=sf,aes(x=chl_small,y=pe,col=pop))+geom_point()
plot1
# Q5 In the plot of pe vs. chl_small, the particles labeled ultra
# should appear to be somewhat "mixed" with two other populations
# of particles. Which two populations?
## Step 4: Train a decision tree.
library(rpart)
library(rpart)
library(rpart.plot)
# construct formula object
fol<-formula(pop ~ fsc_small + fsc_perp + fsc_big + pe + chl_big + chl_small)
CARTmodel <- rpart(fol, method="class", data=train)
print(CARTmodel)
# same thing, using AE terminology
CARTmodel = rpart(pop ~ fsc_small + fsc_perp + fsc_big + pe + chl_big + chl_small, data=train, method="class")
prp(CARTb)
## Step 5: Evaluate the decision tree on the test data.
#accuracy of CART model on test set
PredictCARTmodel = predict(CARTmodel, newdata = test, type = "class")
ct<-table(test$pop, PredictCARTb)
ct
sum(diag(ct))/sum(ct)
sum(PredictCARTb==test$pop)/nrow(test)
## Step 6: Build and evaluate a random forest.
# Install randomForest package
#install.packages("randomForest")
library(randomForest)
fol<-formula(pop ~ fsc_small + fsc_perp + fsc_big + pe + chl_big + chl_small)
forestmodel<-randomForest(fol, data=train)
PredictForest = predict(forestmodel, newdata = test)
library(randomForest)
fol<-formula(pop ~ fsc_small + fsc_perp + fsc_big + pe + chl_big + chl_small)
forestmodel<-randomForest(fol, data=train)
rm(CARTb)
rm(model)
rm(plot1)
rm(spl)
rm(sf)
library(randomForest)
fol<-formula(pop ~ fsc_small + fsc_perp + fsc_big + pe + chl_big + chl_small)
forestmodel<-randomForest(fol, data=train)
